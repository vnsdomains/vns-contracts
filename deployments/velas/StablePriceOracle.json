{
  "address": "0x017A4aB4FD8bA5c9A749dbcF55e55907470976EB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "_usdOracle",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_rentPrices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "name": "RentPriceChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "premium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rentPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_rentPrices",
          "type": "uint256[]"
        }
      ],
      "name": "setPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "_usdOracle",
          "type": "address"
        }
      ],
      "name": "setUsdOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdOracle",
      "outputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5da67d01777adfae4d3af5645479bbd7fe6ef8c5d63dfc94ff94361515d8100e",
  "receipt": {
    "to": null,
    "from": "0x97C1cC7021605146EC962f9f1B5DBf72510e7d00",
    "contractAddress": "0x017A4aB4FD8bA5c9A749dbcF55e55907470976EB",
    "transactionIndex": 1,
    "gasUsed": "1076038",
    "logsBloom": "0x
    "blockHash": "0xbd91719af1eda5999dd98c8e9503454ac14740dd85bdc7c7cb742e4a332d478d",
    "transactionHash": "0x5da67d01777adfae4d3af5645479bbd7fe6ef8c5d63dfc94ff94361515d8100e",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 50310977,
        "transactionHash": "0x5da67d01777adfae4d3af5645479bbd7fe6ef8c5d63dfc94ff94361515d8100e",
        "address": "0x017A4aB4FD8bA5c9A749dbcF55e55907470976EB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000097c1cc7021605146ec962f9f1b5dbf72510e7d00"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbd91719af1eda5999dd98c8e9503454ac14740dd85bdc7c7cb742e4a332d478d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 50310977,
        "transactionHash": "0x5da67d01777adfae4d3af5645479bbd7fe6ef8c5d63dfc94ff94361515d8100e",
        "address": "0x017A4aB4FD8bA5c9A749dbcF55e55907470976EB",
        "topics": [
          "0x0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe418"
        ],
        "data": "0x000000000000000000000000f3c2b8b6ce1585f5314aa394e8d338478b431870",
        "logIndex": 1,
        "blockHash": "0xbd91719af1eda5999dd98c8e9503454ac14740dd85bdc7c7cb742e4a332d478d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 50310977,
        "transactionHash": "0x5da67d01777adfae4d3af5645479bbd7fe6ef8c5d63dfc94ff94361515d8100e",
        "address": "0x017A4aB4FD8bA5c9A749dbcF55e55907470976EB",
        "topics": [
          "0x73422d94aedd596c2d4d39f27a01033adc390a9054efaf259afefd95ef7331df"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000fb6fc00000000000000000000000000000000000000000000000000000000000fb6fc00000000000000000000000000000000000000000000000000000000000fb6fc000000000000000000000000000000000000000000000000000000000009206cf00000000000000000000000000000000000000000000000000000000009206cf00000000000000000000000000000000000000000000000000000000009206cf00000000000000000000000000000000000000000000000000000000003afdaa000000000000000000000000000000000000000000000000000000000000b9ad",
        "logIndex": 2,
        "blockHash": "0xbd91719af1eda5999dd98c8e9503454ac14740dd85bdc7c7cb742e4a332d478d"
      }
    ],
    "blockNumber": 50310977,
    "cumulativeGasUsed": "1076038",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf3C2b8b6cE1585F5314AA394E8D338478B431870",
    [
      16478144,
      16478144,
      16478144,
      9569999,
      9569999,
      9569999,
      3866026,
      47533
    ]
  ],
  "solcInputHash": "dc6b53f391945a169d7568c59ae0b4c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"RentPriceChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rentPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"}],\"name\":\"setUsdOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdOracle\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"premium(string,uint256,uint256)\":{\"details\":\"Returns the pricing premium in wei.\"},\"price(string,uint256,uint256)\":{\"details\":\"Returns the price to register or renew a name.\",\"params\":{\"duration\":\"How long the name is being registered or extended for, in seconds.\",\"expires\":\"When the name presently expires (0 if this is a new registration).\",\"name\":\"The name being registered or renewed.\"},\"returns\":{\"_0\":\"The price of this renewal or registration, in wei.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setPrices(uint256[])\":{\"details\":\"Sets rent prices.\",\"params\":{\"_rentPrices\":\"The price array. Each element corresponds to a specific                    name length; names longer than the length of the array                    default to the price of the last element. Values are                    in base price units, equal to one attodollar (1e-18                    dollar) each.\"}},\"setUsdOracle(address)\":{\"details\":\"Sets usd oracle.\",\"params\":{\"_usdOracle\":\"Oracle address.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/StablePriceOracle.sol\":\"StablePriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ethregistrar/PriceOracle.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface PriceOracle {\\n    /**\\n     * @dev Returns the price to register or renew a name.\\n     * @param name The name being registered or renewed.\\n     * @param expires When the name presently expires (0 if this is a new registration).\\n     * @param duration How long the name is being registered or extended for, in seconds.\\n     * @return The price of this renewal or registration, in wei.\\n     */\\n    function price(string calldata name, uint expires, uint duration) external view returns(uint);\\n}\\n\",\"keccak256\":\"0xcfe3ee922e586ab7a723d10cf6b84299f0d2f94972669cf1e5de3eb8fc0ee2f8\"},\"contracts/ethregistrar/SafeMath.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe0d6a6c8982dd734335683451a3914cbb49801203772b9fc1fd1efacae75d4ce\"},\"contracts/ethregistrar/StablePriceOracle.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n}\\n\\n\\n// StablePriceOracle sets a price in USD, based on an oracle.\\ncontract StablePriceOracle is Ownable, PriceOracle {\\n    using SafeMath for *;\\n    using StringUtils for *;\\n\\n    // Rent in base price units by length. Element 0 is for 1-length names, and so on.\\n    uint[] public rentPrices;\\n\\n    // Oracle address\\n    AggregatorInterface public usdOracle;\\n\\n    event OracleChanged(address oracle);\\n\\n    event RentPriceChanged(uint[] prices);\\n\\n    bytes4 constant private INTERFACE_META_ID = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\n    bytes4 constant private ORACLE_ID = bytes4(keccak256(\\\"price(string,uint256,uint256)\\\") ^ keccak256(\\\"premium(string,uint256,uint256)\\\"));\\n\\n    constructor(AggregatorInterface _usdOracle, uint[] memory _rentPrices) public {\\n        setUsdOracle(_usdOracle);\\n        setPrices(_rentPrices);\\n    }\\n\\n    function price(string calldata name, uint expires, uint duration) external view override returns(uint) {\\n        uint len = name.strlen();\\n        if(len > rentPrices.length) {\\n            len = rentPrices.length;\\n        }\\n        require(len > 0);\\n        \\n        uint basePrice = rentPrices[len - 1].mul(duration);\\n        basePrice = basePrice.add(_premium(name, expires, duration));\\n\\n        return attoUSDToWei(basePrice);\\n    }\\n\\n    /**\\n     * @dev Sets rent prices.\\n     * @param _rentPrices The price array. Each element corresponds to a specific\\n     *                    name length; names longer than the length of the array\\n     *                    default to the price of the last element. Values are\\n     *                    in base price units, equal to one attodollar (1e-18\\n     *                    dollar) each.\\n     */\\n    function setPrices(uint[] memory _rentPrices) public onlyOwner {\\n        rentPrices = _rentPrices;\\n        emit RentPriceChanged(_rentPrices);\\n    }\\n\\n    /**\\n     * @dev Sets usd oracle.\\n     * @param _usdOracle Oracle address.\\n     */\\n    function setUsdOracle(AggregatorInterface _usdOracle) public onlyOwner {\\n        usdOracle = _usdOracle;\\n        emit OracleChanged(address(_usdOracle));\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in wei.\\n     */\\n    function premium(string calldata name, uint expires, uint duration) external view returns(uint) {\\n        return attoUSDToWei(_premium(name, expires, duration));\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in internal base units.\\n     */\\n    function _premium(string memory name, uint expires, uint duration) virtual internal view returns(uint) {\\n        return 0;\\n    }\\n\\n    function attoUSDToWei(uint amount) internal view returns(uint) {\\n        uint ethPrice = uint(usdOracle.latestAnswer());\\n        return amount.mul(1e8).div(ethPrice);\\n    }\\n\\n    function weiToAttoUSD(uint amount) internal view returns(uint) {\\n        uint ethPrice = uint(usdOracle.latestAnswer());\\n        return amount.mul(ethPrice).div(1e8);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual returns (bool) {\\n        return interfaceID == INTERFACE_META_ID || interfaceID == ORACLE_ID;\\n    }\\n}\\n\",\"keccak256\":\"0x8b9ca42611a41e55a04e8562d24d4775d698b7675a2178cef70043447ae21631\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint) {\\n        uint len;\\n        uint i = 0;\\n        uint bytelength = bytes(s).length;\\n        for(len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if(b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n\",\"keccak256\":\"0x48828eaf42494879c04f560e7b17a402d0a8922fc2047844c338776239fd5c80\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620011a9380380620011a9833981016040819052620000349162000225565b6200003f336200005d565b6200004a82620000ad565b62000055816200010c565b50506200036f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000b76200015d565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe418906020015b60405180910390a150565b620001166200015d565b80516200012b906001906020840190620001be565b507f73422d94aedd596c2d4d39f27a01033adc390a9054efaf259afefd95ef7331df8160405162000101919062000313565b6000546001600160a01b03163314620001bc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b828054828255906000526020600020908101928215620001fc579160200282015b82811115620001fc578251825591602001919060010190620001df565b506200020a9291506200020e565b5090565b5b808211156200020a57600081556001016200020f565b6000806040838503121562000238578182fd5b82516001600160a01b03811681146200024f578283fd5b602084810151919350906001600160401b03808211156200026e578384fd5b818601915086601f83011262000282578384fd5b81518181111562000297576200029762000359565b8060051b604051601f19603f83011681018181108582111715620002bf57620002bf62000359565b604052828152858101935084860182860187018b1015620002de578788fd5b8795505b8386101562000302578051855260019590950194938601938601620002e2565b508096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b818110156200034d578351835292840192918401916001016200032f565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b610e2a806200037f6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638da5cb5b11610076578063b740af791161005b578063b740af791461018e578063c8a4271f146101a1578063f2fde38b146101c157600080fd5b80638da5cb5b1461013c578063a34e35961461017b57600080fd5b806350e9a715116100a757806350e9a7151461010c578063715018a61461011f57806379cf92d31461012957600080fd5b806301ffc9a7146100c357806306d5d0b6146100eb575b600080fd5b6100d66100d1366004610b68565b6101d4565b60405190151581526020015b60405180910390f35b6100fe6100f9366004610c3a565b61026d565b6040519081526020016100e2565b6100fe61011a366004610bc0565b61028e565b6101276103b6565b005b610127610137366004610a8a565b6103ca565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e2565b6100fe610189366004610bc0565b610420565b61012761019c366004610a6e565b610476565b6002546101569073ffffffffffffffffffffffffffffffffffffffff1681565b6101276101cf366004610a6e565b6104f1565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061026757507fffffffff0000000000000000000000000000000000000000000000000000000082167ff3a7928300000000000000000000000000000000000000000000000000000000145b92915050565b6001818154811061027d57600080fd5b600091825260209091200154905081565b6000806102d086868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506105ad92505050565b6001549091508111156102e257506001545b600081116102ef57600080fd5b60006103518460016103018186610d24565b81548110610338577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001546107db90919063ffffffff16565b90506103a061039988888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92508991506108149050565b829061081d565b90506103ab81610839565b979650505050505050565b6103be6108f6565b6103c86000610977565b565b6103d26108f6565b80516103e5906001906020840190610a0e565b507f73422d94aedd596c2d4d39f27a01033adc390a9054efaf259afefd95ef7331df816040516104159190610c52565b60405180910390a150565b600061046d61046886868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508791506108149050565b610839565b95945050505050565b61047e6108f6565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe41890602001610415565b6104f96108f6565b73ffffffffffffffffffffffffffffffffffffffff81166105a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6105aa81610977565b50565b8051600090819081905b808210156107d25760008583815181106105fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b01602001517fff000000000000000000000000000000000000000000000000000000000000001690507f800000000000000000000000000000000000000000000000000000000000000081101561065d57610656600184610c96565b92506107bf565b7fe0000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821610156106b257610656600284610c96565b7ff0000000000000000000000000000000000000000000000000000000000000007fff000000000000000000000000000000000000000000000000000000000000008216101561070757610656600384610c96565b7ff8000000000000000000000000000000000000000000000000000000000000007fff000000000000000000000000000000000000000000000000000000000000008216101561075c57610656600484610c96565b7ffc000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821610156107b157610656600584610c96565b6107bc600684610c96565b92505b50826107ca81610d3b565b9350506105b7565b50909392505050565b6000826107ea57506000610267565b60006107f68385610ce7565b9050826108038583610cae565b1461080d57600080fd5b9392505050565b60009392505050565b60008061082a8385610c96565b90508381101561080d57600080fd5b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a457600080fd5b505afa1580156108b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dc9190610ba8565b905061080d816108f0856305f5e1006107db565b906109ec565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610598565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008082116109fa57600080fd5b6000610a068385610cae565b949350505050565b828054828255906000526020600020908101928215610a49579160200282015b82811115610a49578251825591602001919060010190610a2e565b50610a55929150610a59565b5090565b5b80821115610a555760008155600101610a5a565b600060208284031215610a7f578081fd5b813561080d81610dd2565b60006020808385031215610a9c578182fd5b823567ffffffffffffffff80821115610ab3578384fd5b818501915085601f830112610ac6578384fd5b813581811115610ad857610ad8610da3565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715610b1b57610b1b610da3565b604052828152858101935084860182860187018a1015610b39578788fd5b8795505b83861015610b5b578035855260019590950194938601938601610b3d565b5098975050505050505050565b600060208284031215610b79578081fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461080d578182fd5b600060208284031215610bb9578081fd5b5051919050565b60008060008060608587031215610bd5578283fd5b843567ffffffffffffffff80821115610bec578485fd5b818701915087601f830112610bff578485fd5b813581811115610c0d578586fd5b886020828501011115610c1e578586fd5b6020928301999098509187013596604001359550909350505050565b600060208284031215610c4b578081fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015610c8a57835183529284019291840191600101610c6e565b50909695505050505050565b60008219821115610ca957610ca9610d74565b500190565b600082610ce2577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d1f57610d1f610d74565b500290565b600082821015610d3657610d36610d74565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d6d57610d6d610d74565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146105aa57600080fdfea264697066735822122083e3da584974e0984185c20fb4db66c53e21de4c3572398c70d875a266fc6d5964736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80638da5cb5b11610076578063b740af791161005b578063b740af791461018e578063c8a4271f146101a1578063f2fde38b146101c157600080fd5b80638da5cb5b1461013c578063a34e35961461017b57600080fd5b806350e9a715116100a757806350e9a7151461010c578063715018a61461011f57806379cf92d31461012957600080fd5b806301ffc9a7146100c357806306d5d0b6146100eb575b600080fd5b6100d66100d1366004610b68565b6101d4565b60405190151581526020015b60405180910390f35b6100fe6100f9366004610c3a565b61026d565b6040519081526020016100e2565b6100fe61011a366004610bc0565b61028e565b6101276103b6565b005b610127610137366004610a8a565b6103ca565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e2565b6100fe610189366004610bc0565b610420565b61012761019c366004610a6e565b610476565b6002546101569073ffffffffffffffffffffffffffffffffffffffff1681565b6101276101cf366004610a6e565b6104f1565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061026757507fffffffff0000000000000000000000000000000000000000000000000000000082167ff3a7928300000000000000000000000000000000000000000000000000000000145b92915050565b6001818154811061027d57600080fd5b600091825260209091200154905081565b6000806102d086868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506105ad92505050565b6001549091508111156102e257506001545b600081116102ef57600080fd5b60006103518460016103018186610d24565b81548110610338577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001546107db90919063ffffffff16565b90506103a061039988888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92508991506108149050565b829061081d565b90506103ab81610839565b979650505050505050565b6103be6108f6565b6103c86000610977565b565b6103d26108f6565b80516103e5906001906020840190610a0e565b507f73422d94aedd596c2d4d39f27a01033adc390a9054efaf259afefd95ef7331df816040516104159190610c52565b60405180910390a150565b600061046d61046886868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508791506108149050565b610839565b95945050505050565b61047e6108f6565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe41890602001610415565b6104f96108f6565b73ffffffffffffffffffffffffffffffffffffffff81166105a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6105aa81610977565b50565b8051600090819081905b808210156107d25760008583815181106105fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b01602001517fff000000000000000000000000000000000000000000000000000000000000001690507f800000000000000000000000000000000000000000000000000000000000000081101561065d57610656600184610c96565b92506107bf565b7fe0000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821610156106b257610656600284610c96565b7ff0000000000000000000000000000000000000000000000000000000000000007fff000000000000000000000000000000000000000000000000000000000000008216101561070757610656600384610c96565b7ff8000000000000000000000000000000000000000000000000000000000000007fff000000000000000000000000000000000000000000000000000000000000008216101561075c57610656600484610c96565b7ffc000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821610156107b157610656600584610c96565b6107bc600684610c96565b92505b50826107ca81610d3b565b9350506105b7565b50909392505050565b6000826107ea57506000610267565b60006107f68385610ce7565b9050826108038583610cae565b1461080d57600080fd5b9392505050565b60009392505050565b60008061082a8385610c96565b90508381101561080d57600080fd5b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a457600080fd5b505afa1580156108b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dc9190610ba8565b905061080d816108f0856305f5e1006107db565b906109ec565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610598565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008082116109fa57600080fd5b6000610a068385610cae565b949350505050565b828054828255906000526020600020908101928215610a49579160200282015b82811115610a49578251825591602001919060010190610a2e565b50610a55929150610a59565b5090565b5b80821115610a555760008155600101610a5a565b600060208284031215610a7f578081fd5b813561080d81610dd2565b60006020808385031215610a9c578182fd5b823567ffffffffffffffff80821115610ab3578384fd5b818501915085601f830112610ac6578384fd5b813581811115610ad857610ad8610da3565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715610b1b57610b1b610da3565b604052828152858101935084860182860187018a1015610b39578788fd5b8795505b83861015610b5b578035855260019590950194938601938601610b3d565b5098975050505050505050565b600060208284031215610b79578081fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461080d578182fd5b600060208284031215610bb9578081fd5b5051919050565b60008060008060608587031215610bd5578283fd5b843567ffffffffffffffff80821115610bec578485fd5b818701915087601f830112610bff578485fd5b813581811115610c0d578586fd5b886020828501011115610c1e578586fd5b6020928301999098509187013596604001359550909350505050565b600060208284031215610c4b578081fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015610c8a57835183529284019291840191600101610c6e565b50909695505050505050565b60008219821115610ca957610ca9610d74565b500190565b600082610ce2577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d1f57610d1f610d74565b500290565b600082821015610d3657610d36610d74565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d6d57610d6d610d74565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146105aa57600080fdfea264697066735822122083e3da584974e0984185c20fb4db66c53e21de4c3572398c70d875a266fc6d5964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "premium(string,uint256,uint256)": {
        "details": "Returns the pricing premium in wei."
      },
      "price(string,uint256,uint256)": {
        "details": "Returns the price to register or renew a name.",
        "params": {
          "duration": "How long the name is being registered or extended for, in seconds.",
          "expires": "When the name presently expires (0 if this is a new registration).",
          "name": "The name being registered or renewed."
        },
        "returns": {
          "_0": "The price of this renewal or registration, in wei."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setPrices(uint256[])": {
        "details": "Sets rent prices.",
        "params": {
          "_rentPrices": "The price array. Each element corresponds to a specific                    name length; names longer than the length of the array                    default to the price of the last element. Values are                    in base price units, equal to one attodollar (1e-18                    dollar) each."
        }
      },
      "setUsdOracle(address)": {
        "details": "Sets usd oracle.",
        "params": {
          "_usdOracle": "Oracle address."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 545,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11582,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "rentPrices",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 11585,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "usdOracle",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorInterface)11571"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorInterface)11571": {
        "encoding": "inplace",
        "label": "contract AggregatorInterface",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}